package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

import Abstract.Instruction;
import Symbol.Type;
import Symbol.TipoDato;

import Instructions.Print;

import Expressions.Native;
import Expressions.Arithmetics;
import Expressions.ArithmeticOperators;
import Expressions.Logic;
import Expressions.LogicOperators;
import Expressions.Relational;
import Expressions.RelationalOperators;
import Expressions.Cast;

parser code
{:
    lexico s;
    parser(lexico s){this.s = s;}
    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la linea " + (s.left) + " y columna " + 
        (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        System.out.println("Error Sintactico no recuperable en la linea" + (s.left) + 
        " y columna " + (s.right) + ". No se esperaba el componente: " + (s.value) + ".");
    }

:}

action code
{:
:}

terminal String DIGITO, DOUBLE, CADENA;
terminal char CHAR;
terminal String PYC, PARA, PARC;
terminal String PRINTLN, TRUE, FALSE, RINT, RDOUBLE, RSTRING, RBOOL, RCHAR;
terminal String ADD, SUB, DENIAL, MULTI, DIV, MODULE, POWER, EQUAL, NOT, SMALLER, GREATER, OR, AND, XOR, DIFFERENT, SMALLEREQ, GREATEREQ;

non terminal LinkedList<Instruction> INICIO, INSTRUCCIONES;
non terminal Instruction INSTRUCCION, EXPRESION;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence left NOT;
precedence left EQUAL, DIFFERENT, SMALLER, SMALLEREQ, GREATER, GREATEREQ;
precedence left ADD, SUB;
precedence left MULTI, DIV, MODULE;
precedence left POWER;
precedence left DENIAL;

start with INICIO;

INICIO ::= INSTRUCCIONES:a                            {: RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b       {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                       {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= PRINTLN PARA EXPRESION:a PARC PYC     {: RESULT = new Print(a, aleft, aright); :}
;

EXPRESION ::= SUB EXPRESION:a                         {: RESULT = new Arithmetics(null, a, ArithmeticOperators.DENIAL, aleft, aright); :} %prec DENIAL
            | EXPRESION:a MULTI MULTI EXPRESION:b     {: RESULT = new Arithmetics(a, b, ArithmeticOperators.POWER, aleft, aright); :} %prec POWER
            | EXPRESION:a MODULE EXPRESION:b          {: RESULT = new Arithmetics(a, b, ArithmeticOperators.MODULE, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b             {: RESULT = new Arithmetics(a, b, ArithmeticOperators.DIVISION, aleft, aright); :}
            | EXPRESION:a MULTI EXPRESION:b           {: RESULT = new Arithmetics(a, b, ArithmeticOperators.MULTIPLICATION, aleft, aright); :}
            | EXPRESION:a SUB EXPRESION:b             {: RESULT = new Arithmetics(a, b, ArithmeticOperators.SUBTRACTION, aleft, aright); :}
            | EXPRESION:a ADD EXPRESION:b             {: RESULT = new Arithmetics(a, b, ArithmeticOperators.ADDITION, aleft, aright); :}
            | EXPRESION:a EQUAL EXPRESION:b           {: RESULT = new Relational(a, b, RelationalOperators.EQUAL, aleft, aright); :}
            | EXPRESION:a DIFFERENT EXPRESION:b       {: RESULT = new Relational(a, b, RelationalOperators.DIFFERENT, aleft, aright); :}
            | EXPRESION:a SMALLER EXPRESION:b         {: RESULT = new Relational(a, b, RelationalOperators.SMALLER, aleft, aright); :}
            | EXPRESION:a SMALLEREQ EXPRESION:b       {: RESULT = new Relational(a, b, RelationalOperators.SMALLEREQUAL, aleft, aright); :}
            | EXPRESION:a GREATER EXPRESION:b         {: RESULT = new Relational(a, b, RelationalOperators.GREATER, aleft, aright); :}
            | EXPRESION:a GREATEREQ EXPRESION:b       {: RESULT = new Relational(a, b, RelationalOperators.GREATEREQUAL, aleft, aright); :}
            | NOT EXPRESION:a                         {: RESULT = new Logic(null, a, LogicOperators.NOT, aleft, aright); :}
            | EXPRESION:a XOR EXPRESION:b             {: RESULT = new Logic(a, b, LogicOperators.XOR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b             {: RESULT = new Logic(a, b, LogicOperators.AND, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b              {: RESULT = new Logic(a, b, LogicOperators.OR, aleft, aright); :}
            | PARA RINT PARC EXPRESION:a              {: RESULT = new Cast(a, new Type(TipoDato.INTEGER), aleft, aright); :}
            | PARA RDOUBLE PARC EXPRESION:a           {: RESULT = new Cast(a, new Type(TipoDato.DOUBLE), aleft, aright); :}
            | PARA RCHAR PARC EXPRESION:a             {: RESULT = new Cast(a, new Type(TipoDato.CHAR), aleft, aright); :}
            | DIGITO:a                                {: RESULT = new Native(Integer.parseInt(a), new Type(TipoDato.INTEGER), aleft, aright); :}
            | DOUBLE:a                                {: RESULT = new Native(new Double(a), new Type(TipoDato.DOUBLE), aleft, aright); :}
            | CADENA:a                                {: RESULT = new Native(a, new Type(TipoDato.STRING), aleft, aright); :}
            | CHAR:a                                  {: RESULT = new Native(a, new Type(TipoDato.CHAR), aleft, aright); :}
            | TRUE:a                                  {: RESULT = new Native(a, new Type(TipoDato.BOOLEAN), aleft, aright); :}
            | FALSE:a                                 {: RESULT = new Native(a, new Type(TipoDato.BOOLEAN), aleft, aright); :}
            | PARA EXPRESION:a PARC                   {: RESULT = a; :}
;